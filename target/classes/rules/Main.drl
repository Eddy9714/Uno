package com.sample
import com.sample.Game;
import java.util.ArrayList;
import com.sample.Players.PlayerInGame;
import com.sample.Utils.PlayerCards;
import com.sample.Utils.Option;
import com.sample.Cards.Card;
import com.sample.Cards.ActionCard;
import java.util.Random;
import java.util.Scanner;

import java.util.ArrayList;

rule "GAME INIT"
	when 
		$g : Game(
			status == Game.GAME_STATUS.INIT
		)
	then
		System.out.println("La partita è stata creata con successo");
		System.out.println("Sto attendendo che ci siano almeno due giocatori...");
		$g.setStatus(Game.GAME_STATUS.READY);
		update($g);
end

rule "Game READY, create pile, select dealer"
    when
		$g : Game(
			status == Game.GAME_STATUS.READY,
			$players : playersInGame,
			$players.size() >= 2 && $players.size() <= Game.MAX_PLAYERS
		)
    then
    
    	ArrayList<PlayerInGame> players = ((ArrayList<PlayerInGame>)$players);
    	
    	System.out.println("Giocatori trovati: " + players.size());
    	System.out.println("Creo il mazzo");
    	$g.createPile();
    	
    	System.out.println("Imposto il dealer");
    	Random rand = new Random();
		int randomPlayerIndex = rand.nextInt(players.size());
		
		for(int k=0;k<$players.size(); k++) {
			if(randomPlayerIndex == k) {
				PlayerInGame dealer = players.get(k);
				dealer.setRole(PlayerInGame.ROLE.DEALER);
				dealer.setPlayerTurn(true);
			}
			else 
				players.get(k).setRole(PlayerInGame.ROLE.NORMAL);
		}
		System.out.println(players.get(randomPlayerIndex).getPlayer().getName() + " è stato scelto come dealer");
		
    	$g.setStatus(Game.GAME_STATUS.BEGIN);
    	$g.setPhaseStatus(Game.PHASE_STATUS.DEAL_CARDS);
    	update($g);
end

rule "Game BEGIN, the dealer deals 7 cards to each player."
	when
		$g : Game(
			status == Game.GAME_STATUS.BEGIN,
			phaseStatus == Game.PHASE_STATUS.DEAL_CARDS,
			$players : playersInGame
		)
		$dealer : PlayerInGame(role == PlayerInGame.ROLE.DEALER) from $players
	then
		System.out.println("Il dealer distribuisce " + Game.CARDS_TO_DEAL + " carte a ciascun giocatore in senso orario");
		
		System.out.println();
		ArrayList<PlayerCards> playersCards = $g.dealCardsToPlayers($dealer, Game.CARDS_TO_DEAL);
		for(PlayerCards playerCard : playersCards){
			System.out.println(playerCard.getPlayer().getPlayer().getName() + " ha ricevuto le seguenti carte:");
			$g.printPlayerHand(playerCard.getCards());
		}
		
		$g.setPhaseStatus(Game.PHASE_STATUS.FIRST_CARD);
		update($g);
end

rule "Game BEGIN, the dealer draws 1 card and plays it if possible."
	when
		$g : Game(
			status == Game.GAME_STATUS.BEGIN,
			phaseStatus == Game.PHASE_STATUS.FIRST_CARD,
			$players : playersInGame
		)
		$dealer : PlayerInGame(role == PlayerInGame.ROLE.DEALER) from $players
	then
		System.out.println();
		System.out.println("Il dealer " + $dealer.getPlayer().getName() + " pesca la prima carta del gioco"); 
		Card cardDrawn = $g.dealCardToPlayer($dealer);
		System.out.println($dealer.getPlayer().getName() + " ha pescato: " + cardDrawn);
		
		if(cardDrawn.getType() == Card.CARD_TYPE.ACTION && ((ActionCard)cardDrawn).getActionType() == ActionCard.ACTION_TYPE.WILD_DRAW_FOUR){
			System.out.println(ActionCard.ACTION_TYPE.WILD_DRAW_FOUR + "non può essere giocato il primo");
			System.out.println("La carta verrà rimessa nel mazzo e si procederà ad un nuovo ripescaggio");
			$g.putAndShuffle(cardDrawn);
		}
		else {
			$g.playCard($dealer, $dealer.getCards().indexOf(cardDrawn));
			
			if(cardDrawn.getType() == Card.CARD_TYPE.ACTION){
				$g.setPhaseStatus(Game.PHASE_STATUS.EVAL_FIRST_CARD); //TODO
			}
			else {
				$g.setStatus(Game.GAME_STATUS.PLAY);
				$g.setPhaseStatus(Game.PHASE_STATUS.TURN_END);
			}
		}
		
		update($g);
end

rule "GAME PLAY, TURN_END, no more rapid effects. Pass turn to next player"
	when
		$g : Game(
			status == Game.GAME_STATUS.PLAY,
			phaseStatus == Game.PHASE_STATUS.TURN_END,
			$players: playersInGame
		);
		$player : PlayerInGame(playerTurn == true) from $players;
	then		
		int currentPlayerPosition = $players.indexOf($player);
		int nextPosition = Math.floorMod(currentPlayerPosition + ($g.isDirectionLeft() ? -1 : 1), $players.size());
		$player.setPlayerTurn(false);
		
		((PlayerInGame)($players.get(nextPosition))).setPlayerTurn(true);
		
		System.out.println("Il turno di " + $player.getPlayer().getName() + " è terminato");
		System.out.println();
		
		$g.setPhaseStatus(Game.PHASE_STATUS.TURN_START);
		
		update($g);
		
end

rule "GAME PLAY, TURN_START"
	when
		$g : Game(
			status == Game.GAME_STATUS.PLAY,
			phaseStatus == Game.PHASE_STATUS.TURN_START,
			$players: playersInGame
		);
		$player : PlayerInGame(playerTurn == true) from $players;
	then
		
		if($player.getRole() == PlayerInGame.ROLE.DEALER)
			$g.setTurn($g.getTurn() + 1);
			
		System.out.println("Turno " + ($g.getTurn() + 1));
		System.out.println("Ultima carta giocata: " + $g.getDiscardPile().get($g.getDiscardPile().size() - 1).getCard());
		System.out.println();
		System.out.println("E' il turno di " + $player.getPlayer().getName());
		System.out.println("La sua mano è la seguente:");
		$g.printPlayerHand($player.getCards());
		
		$player.setHasDrawn(false);
		$player.setHasPlayedCards(false);
		$player.setUnoDeclared(false);
		$g.setLastSkippedPlayerIndex(-1);
		
		if($player.getBlockCounters() > 0){
			System.out.println($player.getPlayer().getName() + " è bloccato altri " + $player.getBlockCounters() + " turni");
			$player.setBlockCounters($player.getBlockCounters() - 1);
			$g.setPhaseStatus(Game.PHASE_STATUS.TURN_END);
		}
		else $g.setPhaseStatus(Game.PHASE_STATUS.PLAY_CARDS);
		
		update($g);
end

rule "GAME PLAY, PLAY CARDS. Player has to respond to slow card effects. If he is not able to respond, cards effect need to be evaluated"
	when
		$g : Game(
			status == Game.GAME_STATUS.PLAY,
			phaseStatus == Game.PHASE_STATUS.PLAY_CARDS,
			$players: playersInGame,
			$normalPendingCards : normalPendingCards,
			$normalPendingCards.size() > 0
		);
		$player : PlayerInGame(playerTurn == true) from $players;
	then
	
end

rule "GAME PLAY, PLAY CARDS. Cards effect evaluated (if any). Now player may play his cards"
	when
		$g : Game(
			status == Game.GAME_STATUS.PLAY,
			phaseStatus == Game.PHASE_STATUS.PLAY_CARDS,
			$players: playersInGame,
			$normalPendingCards : normalPendingCards,
			$normalPendingCards.size() == 0
		);
		$player : PlayerInGame(playerTurn == true) from $players;
	then
	
		ArrayList<Card> playableCards = $g.getPlayableCards($player, false);
		System.out.println();
		System.out.println($player.getPlayer().getName() + " deve decidere che cosa fare:");
		
		ArrayList<Option> options = new ArrayList<Option>();
		
		for(int k=0; k<playableCards.size();k++){
			options.add(new Option(Option.TYPE.CARD_CHOICE, (k+1) + " - " + "Gioca " + playableCards.get(k)));
		}
		
		if($player.hasPlayedCards() || $player.hasDrawn()){
			options.add(new Option(Option.TYPE.PASS_TURN, (options.size() + 1) + " - Passa il turno"));
		}
		if(!$player.hasDrawn() && !$player.hasPlayedCards()){
			options.add(new Option(Option.TYPE.DRAW, (options.size() + 1) + " - Pesca"));
		}
		
		if(!$player.isUnoDeclared())
			options.add(new Option(Option.TYPE.DECLARE_UNO, (options.size() + 1) + " - Dichiara UNO"));
		
		options.add(new Option(Option.TYPE.CHARGE_UNO_MISSED, (options.size() + 1) + " - UNO non dichiarato"));
		
		
		for(Option option : options){
			System.out.println(option.getMessage());
		}
		
		Scanner in = new Scanner(System.in);
		int num = -1;
		
		do {
			num = in.nextInt();
			
			if(num < 1 || num > options.size()){
				System.out.println("Scegli un'opzione valida!");
				System.out.println();
			}
			else {
				Option opt = options.get(num - 1);
				
				if(opt.getType() == Option.TYPE.CARD_CHOICE){
					$g.playCard($player, $player.getCards().indexOf(playableCards.get(num - 1)));
					
					System.out.println($player.getPlayer().getName() + " ha giocato: " + playableCards.get(num - 1));
					$player.setHasPlayedCards(true);
					
					if(playableCards.get(num - 1).getType() == Card.CARD_TYPE.ACTION && ((ActionCard)playableCards.get(num - 1)).isQuick()){
						$g.setPhaseStatus(Game.PHASE_STATUS.EVAL_CARD);
					}
					else {
						System.out.println("La sua mano è la seguente:");
						$g.printPlayerHand($player.getCards());
					}
					
				}
				else if(opt.getType() == Option.TYPE.PASS_TURN){
					$g.setPhaseStatus(Game.PHASE_STATUS.TURN_END);
				}
				else if(opt.getType() == Option.TYPE.DRAW){
					Card card = $g.dealCardToPlayer($player);
					System.out.println($player.getPlayer().getName() + " ha pescato: " + card);
					System.out.println("La sua mano è la seguente:");
					$g.printPlayerHand($player.getCards());
					$player.setHasDrawn(true);
				}
				else if(opt.getType() == Option.TYPE.CHARGE_UNO_MISSED){
					//Controlla se il giocatore precedente ha dichiarato uno.
				}
				else if(opt.getType() == Option.TYPE.DECLARE_UNO){
					if($player.getCards().size() == 1){
						$player.setUnoDeclared(true);
						System.out.println();
						System.out.println($player.getPlayer().getName() + " esclama UNO!");
					}
					else {
						System.out.println();
						System.out.println($player.getPlayer().getName() + " non può dichiarare UNO!");
					}
				}
			}
		} while(num < 1 || num > options.size());
		
		update($g);
end

/*ESECUZIONE DELLE CARTE SPECIALI*/

rule "EVAL RAPID ACTION CARD REVERSE"
	when
		$g : Game(
			status == Game.GAME_STATUS.PLAY,
			phaseStatus == Game.PHASE_STATUS.EVAL_CARD,
			$cardToEvaluate : cardToEvaluate,
			$card : ((ActionCard)cardToEvaluate.getCard()),
			$card.getActionType() == ActionCard.ACTION_TYPE.REVERSE
		);
	then
		$g.setDirectionLeft(!$g.isDirectionLeft());
		System.out.println("La direzione di gioco è stata cambiata in senso " + ($g.isDirectionLeft() ? "orario" : "antiorario"));
		$g.setPhaseStatus(Game.PHASE_STATUS.PLAY_CARDS);
		update($g);
end

rule "EVAL RAPID ACTION CARD, SKIP"
	when
		$g : Game(
			status == Game.GAME_STATUS.PLAY,
			phaseStatus == Game.PHASE_STATUS.EVAL_CARD,
			$cardToEvaluate : cardToEvaluate,
			$card : ((ActionCard)cardToEvaluate.getCard()),
			$card.getActionType() == ActionCard.ACTION_TYPE.SKIP,
			$players: playersInGame
		);
	then
		int index = $g.getLastSkippedPlayerIndex();
		int epsilon = $g.isDirectionLeft() ? -1 : 1;
		
		int nextSkippedPlayerIndex = (index == -1 ? $players.indexOf($cardToEvaluate.getPlayer()) + epsilon : index + epsilon);
				
		PlayerInGame nextPlayerToSkip = (PlayerInGame)($players.get(nextSkippedPlayerIndex));
		nextPlayerToSkip.setBlockCounters(nextPlayerToSkip.getBlockCounters() + 1);
		System.out.println(nextPlayerToSkip.getPlayer().getName() + " dovrà saltare " + nextPlayerToSkip.getBlockCounters() + " turni");
		
		$g.setLastSkippedPlayerIndex(nextSkippedPlayerIndex);	
		$g.setPhaseStatus(Game.PHASE_STATUS.PLAY_CARDS);
		update($g);	
end

rule "EVAL RAPID ACTION CARD, WILD OR DRAW_4"
	when
		$g : Game(
			status == Game.GAME_STATUS.PLAY,
			phaseStatus == Game.PHASE_STATUS.EVAL_CARD,
			$cardToEvaluate : cardToEvaluate,
			$card : ((ActionCard)cardToEvaluate.getCard()),
			$card.getActionType() == ActionCard.ACTION_TYPE.WILD || $card.getActionType() == ActionCard.ACTION_TYPE.WILD_DRAW_FOUR
		);
	then
		System.out.println($cardToEvaluate.getPlayer().getPlayer().getName() + " deve scegliere un colore:");
		ArrayList<Option> options = new ArrayList<Option>();
		
		int index = 0;
		for(Card.COLOR color : Card.COLOR.values()){
			options.add(new Option(Option.TYPE.COLOR_CHOICE, (++index) + " - "  + color));
		}
		
		for(Option option : options){
			System.out.println(option.getMessage());
		}
		
		Scanner in = new Scanner(System.in);
		int num = -1;
		
		do {
			num = in.nextInt();
			
			if(num < 1 || num > Card.COLOR.values().length){
				System.out.println("Scegli un'opzione valida!");
				System.out.println();
			}
			else {
				System.out.println($cardToEvaluate.getPlayer().getPlayer().getName() + " ha scelto: " + Card.COLOR.values()[num - 1]);
				$card.setColor(Card.COLOR.values()[num - 1]);				
			}
		}
		while(num < 1 || num > Card.COLOR.values().length);
		
		$g.setCardToEvaluate(null);
		$g.setPhaseStatus(Game.PHASE_STATUS.PLAY_CARDS);
		update($g);
end