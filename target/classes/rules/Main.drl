package com.sample
import com.sample.Game;
import java.util.ArrayList;
import com.sample.Players.PlayerInGame;
import com.sample.Utils.Option;
import com.sample.Cards.Card;
import com.sample.Cards.PlayedCard;
import com.sample.Cards.ActionCard;
import java.util.Random;
import java.util.Scanner;

import java.util.ArrayList;

rule "1.1 Game INIT, create pile, select dealer"
    when
		$g : Game(
			status == Game.GAME_STATUS.INIT,
			$players : playersInGame
		)
		eval($players.size() >= 2 && $players.size() <= $g.MAX_PLAYERS);
    then
    
    	System.out.println("Benvenuti nel gioco UNO!");
		System.out.println("La partita è stata creata con successo");
    	
    	ArrayList<PlayerInGame> players = ((ArrayList<PlayerInGame>)$players);
    	
    	System.out.println("Giocatori trovati: " + players.size());
    	System.out.println("Creo il mazzo");
    	
    	//$g.createDeterministicPile();
    	$g.createPile();
    	
    	System.out.println("Imposto il dealer");
    	Random rand = new Random();
		int randomPlayerIndex = rand.nextInt(players.size());
		
		for(int k=0;k<$players.size(); k++) {
			if(randomPlayerIndex == k) {
				PlayerInGame dealer = players.get(k);
				dealer.setRole(PlayerInGame.ROLE.DEALER);
				dealer.setPlayerTurn(true);
			}
			else 
				players.get(k).setRole(PlayerInGame.ROLE.NORMAL);
		}
		System.out.println(players.get(randomPlayerIndex).getPlayer().getName() + " è stato scelto come dealer");
		
    	$g.setStatus(Game.GAME_STATUS.BEGIN);
    	$g.setPhaseStatus(Game.PHASE_STATUS.DEAL_CARDS);
    	update($g);
end

rule "1.2.1 Game BEGIN, the dealer deals 7 cards to each player"
	when
		$g : Game(
			status == Game.GAME_STATUS.BEGIN,
			phaseStatus == Game.PHASE_STATUS.DEAL_CARDS,
			$players : playersInGame
		)
		$dealer : PlayerInGame(role == PlayerInGame.ROLE.DEALER) from $players
	then
		System.out.println("Il dealer distribuisce " + Game.CARDS_TO_DEAL + " carte a ciascun giocatore in senso orario");
		
		System.out.println();
		
		int index = $players.indexOf($dealer);
		
		for(int k = index - 1; k >= 0; k--) {
			PlayerInGame p = (PlayerInGame) $players.get(k);
			$g.dealCardsToPlayer(p, Game.CARDS_TO_DEAL);
			System.out.println(p.getPlayer().getName() + " ha ricevuto le seguenti carte:");
			$g.printCardsList(p.getCards());
		}
		
		for(int k =  $players.size() - 1; k >= index; k--) {
			PlayerInGame p = (PlayerInGame) $players.get(k);
			$g.dealCardsToPlayer(p, Game.CARDS_TO_DEAL);
			System.out.println(p.getPlayer().getName() + " ha ricevuto le seguenti carte:");
			$g.printCardsList(p.getCards());
		}
		
		$g.setPhaseStatus(Game.PHASE_STATUS.FIRST_CARD);
		update($g);
end

rule "1.2.2 Game BEGIN, the dealer draws 1 card and plays it if possible"
	when
		$g : Game(
			status == Game.GAME_STATUS.BEGIN,
			phaseStatus == Game.PHASE_STATUS.FIRST_CARD,
			$players : playersInGame
		)
		$dealer : PlayerInGame(role == PlayerInGame.ROLE.DEALER) from $players
	then
		System.out.println();
		System.out.println("Il dealer " + $dealer.getPlayer().getName() + " pesca la prima carta del gioco"); 
		Card cardDrawn = $g.dealCardToPlayer($dealer);
		System.out.println($dealer.getPlayer().getName() + " ha pescato e giocato: " + cardDrawn);
		
		if(cardDrawn.getType() == Card.CARD_TYPE.ACTION && ((ActionCard)cardDrawn).getActionType() == ActionCard.ACTION_TYPE.WILD_DRAW_FOUR){
			System.out.println(ActionCard.ACTION_TYPE.WILD_DRAW_FOUR + "non può essere giocato il primo turno");
			System.out.println("La carta verrà rimessa nel mazzo e si procederà ad un nuovo ripescaggio");
			$g.putAndShuffle(cardDrawn);
		}
		else {
		
			if(cardDrawn.getType() == Card.CARD_TYPE.ACTION && ((ActionCard)cardDrawn).getActionType() == ActionCard.ACTION_TYPE.REVERSE){
				$dealer.setFirst(true);
			}
			else {
				int currentPlayerPosition = $players.indexOf($dealer);
				int nextPosition = Math.floorMod(currentPlayerPosition + ($g.isDirectionLeft() ? -1 : 1), $players.size());
				((PlayerInGame)$players.get(nextPosition)).setFirst(true);
			}
			
			$g.setCardToEvaluate(new PlayedCard($dealer, $dealer.getCards().indexOf(cardDrawn), 0));			
			$g.setStatus(Game.GAME_STATUS.PLAY);
			$g.setPhaseStatus(Game.PHASE_STATUS.EVAL_FIRST_CARD);
		}
		
		update($g);
end

rule "2.1.1 PLAY, TURN_START. Player turn, show cards. Evaluate if player can play his turn"
	when
		$g : Game(
			status == Game.GAME_STATUS.PLAY,
			phaseStatus == Game.PHASE_STATUS.TURN_START,
			$players: playersInGame
		);
		$player : PlayerInGame(playerTurn == true) from $players;
	then
		
		if($player.isFirst())
			$g.setTurn($g.getTurn() + 1);
			
		System.out.println("-----------------------------------------------------------------------");
		System.out.println("ROUND " + $g.getTurn());
		System.out.println("Ultima carta giocata: " + $g.getDiscardPile().get($g.getDiscardPile().size() - 1).getCard());
		System.out.println();
		System.out.println("E' il turno di " + $player.getPlayer().getName());			
		$player.setHasDrawn(false);
		$player.setHasPlayedCards(false);
		$player.setHasCharged(false);
		
		$g.setPhaseStatus(Game.PHASE_STATUS.MAIN);
		
		if($player.isBlocked()){
			System.out.println($player.getPlayer().getName() + " non può giocare per questo turno");
		}
		
		update($g);
end

rule "2.1.2 PLAY, TURN_START. Player wins if he can play his turn, has no remaining cards and no one has noticed that he hasn't declared UNO before. (max priority)"
	salience 9999
	when
		$g : Game(
			status == Game.GAME_STATUS.PLAY,
			phaseStatus == Game.PHASE_STATUS.TURN_START,
			$players: playersInGame
		);
		$player : PlayerInGame(playerTurn == true) from $players;
		eval($player.isUnoDeclared() == false);
		eval($player.getCards().size() == 0);
		eval(!$player.isBlocked());
	then
		System.out.println($player.getPlayer().getName() + " ha vinto!");
		$g.setStatus(Game.GAME_STATUS.END);
		update($g);
end

rule "2.1.3 PLAY, TURN_START. Game ends if player can play his turn, has no remaining cards and has declered UNO before. (max priority)"
	salience 9999
	when
		$g : Game(
			status == Game.GAME_STATUS.PLAY,
			$players: playersInGame
		);
		$player : PlayerInGame(playerTurn == true) from $players;
		eval($player.isUnoDeclared() == true);
		eval($player.getCards().size() == 0);
		eval(!$player.isBlocked());
	then
		System.out.println($player.getPlayer().getName() + " ha vinto!");
		$g.setStatus(Game.GAME_STATUS.END);
		update($g);
end

rule "2.2 PLAY, MAIN. Player can play his turn. (Set of actions available)"
	when
		$g : Game(
			status == Game.GAME_STATUS.PLAY,
			phaseStatus == Game.PHASE_STATUS.MAIN,
			$players: playersInGame
		);
		$player : PlayerInGame(playerTurn == true) from $players;
	then
		
		System.out.println($player.getPlayer().getName() + " ha la seguente mano:");
		$g.printCardsList($player.getCards());
		
		ArrayList<Card> playableCards = $g.getPlayableCards($player);
		System.out.println();
		System.out.println($player.getPlayer().getName() + " deve decidere che cosa fare:");
		
		ArrayList<Option> options = new ArrayList<Option>();
		
		if(!$player.hasPlayedCards() && !$player.isBlocked()){
			for(int k=0; k<playableCards.size();k++){
				options.add(new Option(Option.TYPE.CARD_CHOICE, playableCards.get(k), (k+1) + " - " + "Gioca " + playableCards.get(k)));
			}	
		}
		
		if($player.hasPlayedCards() || $player.hasDrawn() || $player.isBlocked()){
			options.add(new Option(Option.TYPE.PASS_TURN, null, (options.size() + 1) + " - Passa il turno"));
		}
		if(!$player.hasDrawn() && !$player.hasPlayedCards() && !$player.isBlocked()){
			options.add(new Option(Option.TYPE.DRAW, null, (options.size() + 1) + " - Pesca"));
		}
		
		if(!$player.isUnoDeclared() && !$player.isBlocked())
			options.add(new Option(Option.TYPE.DECLARE_UNO, null, (options.size() + 1) + " - Dichiara UNO"));
		
		if(!$player.hasPlayedCards() && !$player.hasCharged())
			options.add(new Option(Option.TYPE.CHARGE_UNO_MISSED, null, (options.size() + 1) + " - UNO non dichiarato"));
		
		for(Option option : options){
			System.out.println(option.getMessage());
		}
		
		Scanner in = new Scanner(System.in);
		int num = -1;
		
		do {
			num = in.nextInt();
			
			if(num < 1 || num > options.size()){
				System.out.println("Scegli un'opzione valida!");
				System.out.println();
			}
			else {
				Option opt = options.get(num - 1);
				
				if(opt.getType() == Option.TYPE.CARD_CHOICE){
					$g.setCardToEvaluate(new PlayedCard($player, $player.getCards().indexOf(playableCards.get(num - 1)), $g.getTurn()));
					
					System.out.println($player.getPlayer().getName() + " ha giocato: " + playableCards.get(num - 1));
					$player.setHasPlayedCards(true);
					$g.setPhaseStatus(Game.PHASE_STATUS.EVAL_CARD);
					
				}
				else if(opt.getType() == Option.TYPE.PASS_TURN){
					$g.setPhaseStatus(Game.PHASE_STATUS.TURN_END);
				}
				else if(opt.getType() == Option.TYPE.DRAW){
					Card card = $g.dealCardToPlayer($player);
					System.out.println($player.getPlayer().getName() + " ha pescato: " + card);
					
					if($g.isCardPlayable($player, card)){
						$g.setCardToEvaluate(new PlayedCard($player, $player.getCards().indexOf(card), $g.getTurn()));
						System.out.println($player.getPlayer().getName() + " ha giocato: " + card);
						$player.setHasPlayedCards(true);
						$g.setPhaseStatus(Game.PHASE_STATUS.EVAL_CARD);
					}
					else {
						System.out.println($player.getPlayer().getName() + " non può giocare: " + card);
						$g.setPhaseStatus(Game.PHASE_STATUS.TURN_END);
					}
					
					$player.setHasDrawn(true);

				}
				else if(opt.getType() == Option.TYPE.CHARGE_UNO_MISSED){
					
					ArrayList<Option> playerOptions = new ArrayList<Option>();
					
					for(PlayerInGame p : (ArrayList<PlayerInGame>)$players){
						if(!p.equals($player))
							playerOptions.add(new Option(Option.TYPE.PLAYER_CHOICE, p, (playerOptions.size() + 1) + " - " + p.getPlayer().getName()));
					}
					
					if(playerOptions.size() > 0){
					
						System.out.println();
						System.out.println("Scegli il giocatore da accusare:");
						for(Option option : playerOptions){
							System.out.println(option.getMessage());
						}
						
						int num2 = -1;
						
						do {
							num2 = in.nextInt();
				
							if(num2 < 1 || num2 > playerOptions.size()){
								System.out.println("Scegli un'opzione valida!");
								System.out.println();
							}
							else {
								Option opt2 = playerOptions.get(num2 - 1);
								PlayerInGame playerToCharge = (PlayerInGame)opt2.getValue(); 
								
								if(playerToCharge.getCards().size() > 1){
									System.out.println(playerToCharge.getPlayer().getName() + " non è accusabile!");
								}
								else if(playerToCharge.isUnoDeclared())
									System.out.println(playerToCharge.getPlayer().getName() + " ha dichiarato precedentemente UNO!");
								else {
									System.out.println(playerToCharge.getPlayer().getName() + " non ha dichiarato UNO!");
									System.out.println(playerToCharge.getPlayer().getName() + " deve pescare 2 carte");
									ArrayList<Card> drawnCards = $g.dealCardsToPlayer(playerToCharge, 2);
									System.out.println(playerToCharge.getPlayer().getName() + " ha pescato: ");
									$g.printCardsList(drawnCards);
									$player.setHasCharged(true);
								}
								System.out.println();
							}
						}
						while(num2 < 1 || num2 > playerOptions.size());
					}
					else {
						System.out.println("Nessun giocatore accusabile!");
						$player.setHasCharged(true);
					}
				}
				else if(opt.getType() == Option.TYPE.DECLARE_UNO){
					if($player.getCards().size() == 1){
						$player.setUnoDeclared(true);
						System.out.println();
						System.out.println($player.getPlayer().getName() + " esclama UNO!");
					}
					else {
						System.out.println();
						System.out.println($player.getPlayer().getName() + " non può dichiarare UNO!");
					}
					System.out.println();
				}
			}
		} while(num < 1 || num > options.size());
		
		update($g);
end

rule "2.3 PLAY, TURN_END. Pass turn to next player"
	when
		$g : Game(
			status == Game.GAME_STATUS.PLAY,
			phaseStatus == Game.PHASE_STATUS.TURN_END,
			$players: playersInGame
		);
		$player : PlayerInGame(playerTurn == true) from $players;
	then		
		int currentPlayerPosition = $players.indexOf($player);
		int nextPosition = Math.floorMod(currentPlayerPosition + ($g.isDirectionLeft() ? -1 : 1), $players.size());
		$player.setPlayerTurn(false);
		
		((PlayerInGame)($players.get(nextPosition))).setPlayerTurn(true);
		
		System.out.println("Il turno di " + $player.getPlayer().getName() + " è terminato");
		System.out.println();
		
		if($player.isBlocked()){
			$player.setBlocked(false);
		}
		
		$g.setPhaseStatus(Game.PHASE_STATUS.TURN_START);
			
		update($g);
end

/*ESECUZIONE DELLE CARTE*/

rule "3.1 Evaluate WILD_CARD (first turn)"
	when
		$g : Game(
			status == Game.GAME_STATUS.PLAY,
			phaseStatus == Game.PHASE_STATUS.EVAL_FIRST_CARD,
			$discardPile : discardPile,
			$players: playersInGame,
			$cardToEvaluate : cardToEvaluate,
			$cardToEvaluate != null,
			cardToEvaluate.getCard().getType() == Card.CARD_TYPE.ACTION,
			$card : ((ActionCard)cardToEvaluate.getCard()),
			$card.getActionType() == ActionCard.ACTION_TYPE.WILD
		);
		$player : PlayerInGame(playerTurn == true) from $players;
	then
	
		int currentPlayerPosition = $players.indexOf($player);
		int nextPosition = Math.floorMod(currentPlayerPosition + ($g.isDirectionLeft() ? -1 : 1), $players.size());
		
		PlayerInGame playerInGame = (PlayerInGame)($players.get(nextPosition));
		
		System.out.println(playerInGame.getPlayer().getName() + " deve scegliere un colore:");
		ArrayList<Option> options = new ArrayList<Option>();
		
		int index = 0;
		for(Card.COLOR color : Card.COLOR.values()){
			options.add(new Option(Option.TYPE.COLOR_CHOICE, color, (++index) + " - "  + color));
		}
		
		for(Option option : options){
			System.out.println(option.getMessage());
		}
		
		Scanner in = new Scanner(System.in);
		int num = -1;
		
		do {
			num = in.nextInt();
			
			if(num < 1 || num > Card.COLOR.values().length){
				System.out.println("Scegli un'opzione valida!");
				System.out.println();
			}
			else {
				System.out.println(playerInGame.getPlayer().getName() + " ha scelto: " + Card.COLOR.values()[num - 1]);
				$card.setColor(Card.COLOR.values()[num - 1]);				
			}
		}
		while(num < 1 || num > Card.COLOR.values().length);
		
		$discardPile.add($cardToEvaluate);
		$cardToEvaluate.getPlayer().removeCard($cardToEvaluate.getCard());
		$g.setCardToEvaluate(null);
		
		$g.setPhaseStatus(Game.PHASE_STATUS.TURN_END);

		update($g);
end

rule "3.2.1 Evaluate WILD or WILD_DRAW_FOUR color picker (not first turn)"
	when
		$g : Game(
			status == Game.GAME_STATUS.PLAY,
			phaseStatus == Game.PHASE_STATUS.EVAL_CARD,
			$discardPile : discardPile,
			$cardToEvaluate : cardToEvaluate,
			$cardToEvaluate != null,
			cardToEvaluate.getCard().getType() == Card.CARD_TYPE.ACTION,
			$card : ((ActionCard)cardToEvaluate.getCard()),
			$card.getActionType() == ActionCard.ACTION_TYPE.WILD || (
				$card.getActionType() == ActionCard.ACTION_TYPE.WILD_DRAW_FOUR && $card.getColor() == null
			)
		); 
	then
		System.out.println($cardToEvaluate.getPlayer().getPlayer().getName() + " deve scegliere un colore:");
		ArrayList<Option> options = new ArrayList<Option>();
		
		int index = 0;
		for(Card.COLOR color : Card.COLOR.values()){
			options.add(new Option(Option.TYPE.COLOR_CHOICE, color, (++index) + " - "  + color));
		}
		
		for(Option option : options){
			System.out.println(option.getMessage());
		}
		
		Scanner in = new Scanner(System.in);
		int num = -1;
		
		do {
			num = in.nextInt();
			
			if(num < 1 || num > Card.COLOR.values().length){
				System.out.println("Scegli un'opzione valida!");
				System.out.println();
			}
			else {
				System.out.println($cardToEvaluate.getPlayer().getPlayer().getName() + " ha scelto: " + Card.COLOR.values()[num - 1]);
				$card.setColor(Card.COLOR.values()[num - 1]);				
			}
		}
		while(num < 1 || num > Card.COLOR.values().length);
		
		$discardPile.add($cardToEvaluate);
		$cardToEvaluate.getPlayer().removeCard($cardToEvaluate.getCard());
		
		if($card.getActionType() != ActionCard.ACTION_TYPE.WILD_DRAW_FOUR){
			$g.setCardToEvaluate(null);
			$g.setPhaseStatus(Game.PHASE_STATUS.MAIN);
		}
				
		update($g);
end

rule "3.2.2 Evaluate WILD_DRAW_FOUR (color chosen, not first turn)"
	when
		$g : Game(
			status == Game.GAME_STATUS.PLAY,
			phaseStatus == Game.PHASE_STATUS.EVAL_CARD,
			$discardPile : discardPile,
			$players : playersInGame,
			$cardToEvaluate : cardToEvaluate,
			$cardToEvaluate != null,
			cardToEvaluate.getCard().getType() == Card.CARD_TYPE.ACTION,
			$card : ((ActionCard)cardToEvaluate.getCard()),
			$card.getActionType() == ActionCard.ACTION_TYPE.WILD_DRAW_FOUR,
			$card.getColor() != null
		);
		$player : PlayerInGame(playerTurn == true) from $players;
	then
		
		int currentPlayerPosition = $players.indexOf($cardToEvaluate.getPlayer());
		int nextPosition = Math.floorMod(currentPlayerPosition + ($g.isDirectionLeft() ? -1 : 1), $players.size());
		
		PlayerInGame nextPlayer = (PlayerInGame)($players.get(nextPosition));
		System.out.println("Il giocatore " + nextPlayer.getPlayer().getName() + " deve decidere cosa fare.");
		
		ArrayList<Option> options = new ArrayList<Option>();
		Scanner in = new Scanner(System.in);
		int num = -1;
		
		options.add(new Option(Option.TYPE.CHOICE_YES, null, "1 - Pesca le carte"));
		options.add(new Option(Option.TYPE.CHOICE_NO, null, "2 - Accusa giocatore"));
		
		for(Option option : options){
			System.out.println(option.getMessage());
		}
		
		do {
			num = in.nextInt();
			
			if(num < 1 || num > options.size()){
				System.out.println("Scegli un'opzione valida!");
				System.out.println();
			}
			else {
				Option opt = options.get(num - 1);
				
				if(opt.getType() == Option.TYPE.CHOICE_YES){
					ArrayList<Card> cards = $g.dealCardsToPlayer(nextPlayer, 4);
					System.out.println(nextPlayer.getPlayer().getName() + " ha pescato: ");
					$g.printCardsList(cards);		
					$g.setNextToSkip(true);				
				}
				else {
					System.out.println(nextPlayer.getPlayer().getName() + " ha accusato " + $player.getPlayer().getName());
					System.out.println($player.getPlayer().getName() + " ha la seguente mano:");
					$g.printCardsList($player.getCards());
					
					ArrayList<Card> cards = $g.getPlayableCards($player, $g.getDiscardPile().get($g.getDiscardPile().size() - 2));
					
					// WILD_DRAW_FOUR non è considerata una carta giocabile in alternativa ad una WILD_DRAW_FOUR
					for(Card c : cards){
						if(c.getType() == Card.CARD_TYPE.ACTION)
						{
							ActionCard ac = (ActionCard)c;
							if(ac.getActionType() == ActionCard.ACTION_TYPE.WILD_DRAW_FOUR){
								cards.remove(c);
							}
						} 
					}
					
					if(cards.size() > 0){
						System.out.println(nextPlayer.getPlayer().getName() + " ha indovinato!");
						System.out.println($player.getPlayer().getName() + " poteva giocare: ");
						$g.printCardsList(cards);
						System.out.println($player.getPlayer().getName() + " deve pescare 4 carte");
						ArrayList<Card> drawnCards = $g.dealCardsToPlayer($player, 4);
						System.out.println($player.getPlayer().getName() + " ha pescato: ");
						$g.printCardsList(drawnCards);
					}
					else {
						System.out.println(nextPlayer.getPlayer().getName() + " ha sbagliato!");
						System.out.println(nextPlayer.getPlayer().getName() + " deve pescare 6 carte");
						ArrayList<Card> drawnCards = $g.dealCardsToPlayer(nextPlayer, 6);
						System.out.println(nextPlayer.getPlayer().getName() + " ha pescato: ");
						$g.printCardsList(drawnCards);
						$g.setNextToSkip(true);
					}
				}
			}
		}
		while(num < 1 || num > options.size());
		$g.setCardToEvaluate(null);
		$g.setPhaseStatus(Game.PHASE_STATUS.MAIN);
			
		update($g);
end

rule "3.3 Evaluate DRAW_TWO (indipendent from turn)"
	when
		$g : Game(
			status == Game.GAME_STATUS.PLAY,
			phaseStatus == Game.PHASE_STATUS.EVAL_CARD || phaseStatus == Game.PHASE_STATUS.EVAL_FIRST_CARD,
			$phaseStatus : phaseStatus,
			$discardPile : discardPile,
			$players : playersInGame,
			$cardToEvaluate : cardToEvaluate,
			$cardToEvaluate != null,
			cardToEvaluate.getCard().getType() == Card.CARD_TYPE.ACTION,
			$card : ((ActionCard)cardToEvaluate.getCard()),
			$card.getActionType() == ActionCard.ACTION_TYPE.DRAW_TWO
		);
		$player : PlayerInGame(playerTurn == true) from $players;
	then		
		int epsilon = $g.isDirectionLeft() ? -1 : 1;
		int nextSkippedPlayerIndex = Math.floorMod($players.indexOf($player) + epsilon, $players.size());	
				
		PlayerInGame nextPlayerToSkip = (PlayerInGame)($players.get(nextSkippedPlayerIndex));
		System.out.println("Il giocatore " + nextPlayerToSkip.getPlayer().getName() + " deve pescare due carte e salta il turno");
		
		ArrayList<Card> drawnCards = $g.dealCardsToPlayer(nextPlayerToSkip, 2);
		System.out.println(nextPlayerToSkip.getPlayer().getName() + " ha pescato: ");
		$g.printCardsList(drawnCards);
		
		$discardPile.add($cardToEvaluate);
		$cardToEvaluate.getPlayer().removeCard($cardToEvaluate.getCard());
		
		$g.setNextToSkip(true);
		
		$g.setCardToEvaluate(null);
		
		if($phaseStatus == Game.PHASE_STATUS.EVAL_FIRST_CARD)
			$g.setPhaseStatus(Game.PHASE_STATUS.TURN_END);
		else
			$g.setPhaseStatus(Game.PHASE_STATUS.MAIN);	
			
		update($g);
end

rule "3.4 Evaluate REVERSE (indipendent from turn)"
	when
		$g : Game(
			status == Game.GAME_STATUS.PLAY,
			phaseStatus == Game.PHASE_STATUS.EVAL_CARD || phaseStatus == Game.PHASE_STATUS.EVAL_FIRST_CARD,
			$discardPile : discardPile,
			$phaseStatus : phaseStatus,
			$cardToEvaluate : cardToEvaluate,
			$cardToEvaluate != null,
			cardToEvaluate.getCard().getType() == Card.CARD_TYPE.ACTION,
			$card : ((ActionCard)cardToEvaluate.getCard()),
			$card.getActionType() == ActionCard.ACTION_TYPE.REVERSE
		);
	then
		$g.setDirectionLeft(!$g.isDirectionLeft());
		System.out.println("La direzione di gioco è stata cambiata in senso " + ($g.isDirectionLeft() ? "orario" : "antiorario"));

		$discardPile.add($cardToEvaluate);
		$cardToEvaluate.getPlayer().removeCard($cardToEvaluate.getCard());
		$g.setCardToEvaluate(null);
		
		if($phaseStatus == Game.PHASE_STATUS.EVAL_FIRST_CARD) {
			$g.setPhaseStatus(Game.PHASE_STATUS.TURN_START);
		}
		else {
			$g.setPhaseStatus(Game.PHASE_STATUS.MAIN);
		}
		update($g);
end

rule "3.5 Evaluate SKIP (indipendent from turn)"
	when
		$g : Game(
			status == Game.GAME_STATUS.PLAY,
			phaseStatus == Game.PHASE_STATUS.EVAL_CARD || phaseStatus == Game.PHASE_STATUS.EVAL_FIRST_CARD,
			$phaseStatus : phaseStatus,
			$discardPile : discardPile,
			$cardToEvaluate : cardToEvaluate,
			$cardToEvaluate != null,
			cardToEvaluate.getCard().getType() == Card.CARD_TYPE.ACTION,
			$card : ((ActionCard)cardToEvaluate.getCard()),
			$card.getActionType() == ActionCard.ACTION_TYPE.SKIP,
			$players: playersInGame
		);
		$player : PlayerInGame(playerTurn == true) from $players;
	then
	
		int epsilon = $g.isDirectionLeft() ? -1 : 1;
		int nextSkippedPlayerIndex = Math.floorMod($players.indexOf($cardToEvaluate.getPlayer()) + epsilon, $players.size());			
		PlayerInGame nextPlayerToSkip = (PlayerInGame)($players.get(nextSkippedPlayerIndex));
		nextPlayerToSkip.setBlocked(true);
		System.out.println(nextPlayerToSkip.getPlayer().getName() + " dovrà saltare il turno");
		
		$discardPile.add($cardToEvaluate);
		$cardToEvaluate.getPlayer().removeCard($cardToEvaluate.getCard());
		$g.setCardToEvaluate(null);
		$g.setNextToSkip(true);
		
		if($phaseStatus == Game.PHASE_STATUS.EVAL_FIRST_CARD)
			$g.setPhaseStatus(Game.PHASE_STATUS.TURN_END);
		else
			$g.setPhaseStatus(Game.PHASE_STATUS.MAIN);
		update($g);	
end

rule "3.6 Evaluate NORMAL CARD (indipendent from turn)"
	when
		$g : Game(
			status == Game.GAME_STATUS.PLAY,
			phaseStatus == Game.PHASE_STATUS.EVAL_CARD || phaseStatus == Game.PHASE_STATUS.EVAL_FIRST_CARD,
			$phaseStatus : phaseStatus,
			$discardPile: discardPile,
			$cardToEvaluate : cardToEvaluate,
			$cardToEvaluate != null,
			cardToEvaluate.getCard().getType() == Card.CARD_TYPE.NORMAL
		);
	then
		$discardPile.add($cardToEvaluate);
		$cardToEvaluate.getPlayer().removeCard($cardToEvaluate.getCard());
		$g.setCardToEvaluate(null);
		
		if($phaseStatus == Game.PHASE_STATUS.EVAL_FIRST_CARD)
			$g.setPhaseStatus(Game.PHASE_STATUS.TURN_END);
		else
			$g.setPhaseStatus(Game.PHASE_STATUS.MAIN);
		update($g);
end


rule "4.1 Player designed has to skip the turn (triggers after an action card has been played)"
	salience 9999
	when
		$g : Game(
			status == Game.GAME_STATUS.PLAY,
			$players: playersInGame,
			nextToSkip == true
		);
		$player : PlayerInGame(playerTurn == true) from $players;
	then
		int epsilon = $g.isDirectionLeft() ? -1 : 1;
		int nextSkippedPlayerIndex = Math.floorMod($players.indexOf($player) + epsilon, $players.size());			
		PlayerInGame nextPlayerToSkip = (PlayerInGame)($players.get(nextSkippedPlayerIndex));
		nextPlayerToSkip.setBlocked(true);
		$g.setNextToSkip(false);
		update($g);
end

rule "4.2 Player that remains with one card and this one is special, has to draw one card."
	salience 9999
	when
		$g : Game(
			status == Game.GAME_STATUS.PLAY,
			$players: playersInGame
		);
		$player : PlayerInGame(playerTurn == true) from $players;
		eval($player.getCards().size() == 1);
		eval($player.getCards().get($player.getCards().size() - 1).getType() == Card.CARD_TYPE.ACTION);
	then
		System.out.println($player.getPlayer().getName() + " non può concludere con una carta speciale, quindi pesca 1 carta.");
		ArrayList<Card> drawnCards = $g.dealCardsToPlayer($player, 1);
		System.out.println($player.getPlayer().getName() + " ha pescato: ");
		$g.printCardsList(drawnCards);
end

rule "4.3 Player has no more one Card. Reset uno declared if true"
	salience 9999
	when
		$g : Game(
			status == Game.GAME_STATUS.PLAY,
			$players: playersInGame
		);
		$player : PlayerInGame(playerTurn == true) from $players;
		eval($player.isUnoDeclared() == true);
		eval($player.getCards().size() > 1);
	then
		$player.setUnoDeclared(false);
end